import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int[][] neighbours(int i, int j){
        return new int[][]{
            {i,j+1},{i,j-1},
            {i+1,j},{i+1,j+1},{i+1, j-1},  
            {i-1,j},{i-1,j-1},{i-1, j-1}
        };
    }
    
    static int newRegion(int[][] matrix, int i, int j){
        if(matrix[i][j] != 1)
            return 0;
        int n = matrix.length, m = matrix[0].length, counter = 0;
        List<int[]> cells = new ArrayList<int[]>();
        cells.add(new int[]{i, j});
        
        while(cells.size() > 0){
            int[] coords = cells.remove(0);
            i = coords[0];
            j = coords[1];
            if(i >= 0 && i < n && j >= 0 && j < m && matrix[i][j] == 1){
                matrix[i][j] = 2;
                int[][] neigh = neighbours(i, j);
                cells.addAll(Arrays.asList(neigh));
                ++counter;
            }
        } 
        
        return counter;
    }
    
    static int connectedCell(int[][] matrix) {
        int max_region = 0;
        for(int i = 0; i < matrix.length; ++i)
            for(int j = 0; j < matrix[0].length; ++j)
                max_region = Math.max(max_region, newRegion(matrix, i, j));
        
        return max_region;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int m = in.nextInt();
        int[][] matrix = new int[n][m];
        for(int matrix_i = 0; matrix_i < n; matrix_i++){
            for(int matrix_j = 0; matrix_j < m; matrix_j++){
                matrix[matrix_i][matrix_j] = in.nextInt();
            }
        }
        int result = connectedCell(matrix);
        System.out.println(result);
        in.close();
    }
}
