import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashMap;

public class Solution {
  private static Reader in;
  private static PrintWriter out;

  public static void main(String[] args) throws IOException {
    in = new Reader();
    out = new PrintWriter(System.out, true);
    int N = in.nextInt();
    int[] arr = new int[N];
    for (int i = 0; i < N; i++)
      arr[i] = in.nextInt();
    int[] brr = Arrays.copyOf(arr, N);
    Arrays.sort(brr);
    HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();
    for (int i = 0; i < N; i++)
      mp.put(brr[i], i);
    for (int i = 0; i < N; i++) {
      arr[i] = mp.get(arr[i]);
    }

    int outofpos = 0;
    for (int i = 0; i < N; i++) {
      if (arr[i] != i)
        outofpos++;
    }

    if (outofpos == 0) {
      out.println("yes");
      out.close();
      System.exit(0);
    } else if (outofpos == 2) {
      out.println("yes");
      out.print("swap");
      for (int i = 0; i < N; i++) {
        if (arr[i] != i)
          out.print(" " + (i + 1));
      }
      out.println();
      out.close();
      System.exit(0);
    } else {
      int s = -1, e = -1;
      for (int i = 0; i < N; i++) {
        if (arr[i] != i) {
          e = i;
          if (s == -1) s = i;
        }
      }
      for (int i = s, j = e; i < j; i++, j--) {
        int t = arr[i]; arr[i] = arr[j]; arr[j] = t;
      }
      for (int i = 0; i < N; i++) {
        if (arr[i] != i) {
          out.println("no");
          out.close();
          System.exit(0);
        }
      }
      
      out.println("yes");
      out.printf("reverse %d %d\n", s+1, e+1);
      out.close();
      System.exit(0);
    }
    out.close();
    System.exit(0);
  }

  static class Reader {
    final private int BUFFER_SIZE = 1 << 16;
    private DataInputStream din;
    private byte[] buffer;
    private int bufferPointer, bytesRead;

    public Reader() {
      din = new DataInputStream(System.in);
      buffer = new byte[BUFFER_SIZE];
      bufferPointer = bytesRead = 0;
    }

    public Reader(String file_name) throws IOException {
      din = new DataInputStream(new FileInputStream(file_name));
      buffer = new byte[BUFFER_SIZE];
      bufferPointer = bytesRead = 0;
    }

    public String readLine() throws IOException {
      byte[] buf = new byte[1024];
      int cnt = 0, c;
      while ((c = read()) != -1) {
        if (c == '\n')
          break;
        buf[cnt++] = (byte) c;
      }
      return new String(buf, 0, cnt);
    }

    public int nextInt() throws IOException {
      int ret = 0;
      byte c = read();
      while (c <= ' ')
        c = read();
      boolean neg = (c == '-');
      if (neg)
        c = read();
      do {
        ret = ret * 10 + c - '0';
      } while ((c = read()) >= '0' && c <= '9');
      if (neg)
        return -ret;
      return ret;
    }

    public long nextLong() throws IOException {
      long ret = 0;
      byte c = read();
      while (c <= ' ')
        c = read();
      boolean neg = (c == '-');
      if (neg)
        c = read();
      do {
        ret = ret * 10 + c - '0';
      } while ((c = read()) >= '0' && c <= '9');
      if (neg)
        return -ret;
      return ret;
    }

    public double nextDouble() throws IOException {
      double ret = 0, div = 1;
      byte c = read();
      while (c <= ' ')
        c = read();
      boolean neg = (c == '-');
      if (neg)
        c = read();
      do {
        ret = ret * 10 + c - '0';
      } while ((c = read()) >= '0' && c <= '9');
      if (c == '.')
        while ((c = read()) >= '0' && c <= '9')
          ret += (c - '0') / (div *= 10);
      if (neg)
        return -ret;
      return ret;
    }

    private void fillBuffer() throws IOException {
      bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
      if (bytesRead == -1)
        buffer[0] = -1;
    }

    private byte read() throws IOException {
      if (bufferPointer == bytesRead)
        fillBuffer();
      return buffer[bufferPointer++];
    }

    public void close() throws IOException {
      if (din == null)
        return;
      din.close();
    }
  }

}
